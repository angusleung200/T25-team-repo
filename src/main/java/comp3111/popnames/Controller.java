/**
 * Building on the sample skeleton for 'ui.fxml' COntroller Class generated by SceneBuilder 
 */
package comp3111.popnames;

import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import java.net.URL;
import comp3111.popnames.Task2_KthPopularNames;
import comp3111.popnames.Task5_PredictionPairsName;
import comp3111.popnames.PopupWindow;

import org.eclipse.jetty.util.resource.Resource;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;

import javafx.fxml.Initializable;

import javafx.scene.chart.BarChart;

import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Tab;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.stage.Stage;
import javafx.scene.Group;
import javafx.scene.Scene;

import javax.swing.*;


public class Controller implements Initializable{

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldNameF;

    @FXML
    private TextField textfieldYear;

    @FXML
    private Button buttonRankM;

    @FXML
    private TextField textfieldNameM;

    @FXML
    private Button buttonRankF;

    @FXML
    private Button buttonTopM;

    @FXML
    private Button buttonTopF;

    @FXML
    private Button buttonSummary;
    
    @FXML
    private Tab tabReport1;

    @FXML
    private ToggleGroup T1;

    @FXML
    private Tab tabReport2;

    @FXML
    private ToggleGroup T11;

    @FXML
    private Tab tabReport3;

    @FXML
    private ToggleGroup T111;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;
    
    @FXML

    private TextField t2_textfield_yoi1;
    
    @FXML
    private TextField t2_textfield_yoi2;
    
    @FXML
    private TextField t2_textfield_k_th;
    
    @FXML
    private TextField t5_textfield_name;
    
    @FXML
    private TextField t5_textfield_year;
    
    @FXML
    private ComboBox<String>  t2_comboBox_gender;
    
    @FXML
    private ComboBox<String>  t5_combobox_gender;
    
    @FXML
    private ComboBox<String>  t5_combobox_gender_mate;
    
    @FXML
    private ComboBox<String>  t5_combobox_preference;
    
    @FXML
    private ComboBox<String>  t5_combobox_algorithm;
    
    @FXML
    private ComboBox<String>  t5_combobox_year_range;
    
    @FXML
    private Button t2_button_table_report;
    
    @FXML
    private Button t2_button_summary_report;
    
    @FXML
    private Button t2_button_bar_report;
    
    @FXML
    private Button t2_button_pie_report;
    
    
    
    @Override
    public void initialize(URL location, ResourceBundle resources) {
    	t2_comboBox_gender.setItems(FXCollections.observableArrayList("Male","Female"));
    	t2_comboBox_gender.setValue("Male");
    	t5_combobox_gender.setItems(FXCollections.observableArrayList("Male","Female"));
    	t5_combobox_gender.setValue("Male");
    	t5_combobox_gender_mate.setItems(FXCollections.observableArrayList("Male","Female"));
    	t5_combobox_gender_mate.setValue("Female");
    	t5_combobox_preference.setItems(FXCollections.observableArrayList("Younger","Older"));
    	t5_combobox_preference.setValue("Younger");
    	t5_combobox_algorithm.setItems(FXCollections.observableArrayList("T5X1","T5X2"));
    	t5_combobox_algorithm.setValue("T5X1");
    	t5_combobox_year_range.setItems(FXCollections.observableArrayList("1","5","10","15","20"));
    	t5_combobox_year_range.setValue("1");
    	t5_combobox_year_range.setDisable(true);
		t5_combobox_preference.setDisable(true);
    	t5_combobox_algorithm.setOnAction((event) -> {
    			if(t5_combobox_algorithm.getSelectionModel().getSelectedItem().equals("T5X1"))
    			{
    				t5_combobox_year_range.setDisable(true);
    				t5_combobox_preference.setDisable(true);
    			}
    			else {
    				t5_combobox_year_range.setDisable(false);
    				t5_combobox_preference.setDisable(false);
    			}
    	
    	});
    }
    
    @FXML
    private Button buttonDataTable_T1;

    @FXML
    private Button buttonPieChart_T1;

    @FXML
    private Button buttonBarChart_T1;

    @FXML
    private Button buttonSummary_T1;
    
    @FXML
    private TextField textfieldYear_T1;
    
    @FXML
    private TextField textfieldTopN_T1;
    
    @FXML
    private TextField textfieldDadName_T4;
    
    @FXML
    private TextField textfieldMomName_T4;
    
    @FXML
    private TextField textfieldDadYOB_T4;
    
    @FXML
    private TextField textfieldMomYOB_T4;
    
    @FXML
    private Button buttonT4X1_T4;

    @FXML
    private Button buttonT4X2_T4;


    /**
     *  Task Zero
     *  To be triggered by the "Summary" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doSummary() {
    	int year = Integer.parseInt(textfieldYear.getText());
    	String oReport = AnalyzeNames.getSummary(year);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rank (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankF() {
    	String oReport = "";
    	String iNameF = textfieldNameF.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameF, "F");
    	if (oRank == -1)
    		oReport = String.format("The name %s (female) has not been ranked in the year %d.\n", iNameF, iYear);
    	else
    		oReport = String.format("Rank of %s (female) in year %d is #%d.\n", iNameF, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rank (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankM() {
    	String oReport = "";
    	String iNameM = textfieldNameM.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameM, "M");
    	if (oRank == -1)
    		oReport = String.format("The name %s (male) has not been ranked in the year %d.\n", iNameM, iYear);
    	else
    		oReport = String.format("Rank of %s (male) in year %d is #%d.\n", iNameM, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopF() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (female) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "F"));
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopM() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (male) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "M"));
    	textAreaConsole.setText(oReport);
    }
    

    
    /**
     *  Task two
     *  To be triggered by the "Summary" button on the Task two Tab
     *  
     */
    @FXML
    void doKThPopularNamesForSummary() {
    	int iYear1 = -1;
    	int iYear2 = -1;
    	int k = -1;
    	String summary = "";
    	String gender = "";
    	String tmp_year1 = t2_textfield_yoi1.getText();
    	String tmp_year2 = t2_textfield_yoi2.getText();
    	PopupWindow pw = new PopupWindow();
    	Task2_KthPopularNames kpn = new Task2_KthPopularNames();
    	
    	if(kpn.dataChecker(t2_textfield_yoi1, t2_textfield_yoi2, t2_textfield_k_th)) {
	    	iYear1 = Integer.parseInt(tmp_year1);
			iYear2 = Integer.parseInt(tmp_year2);
			k = Integer.parseInt(t2_textfield_k_th.getText());
			gender = t2_comboBox_gender.getSelectionModel().getSelectedItem().toString();
	    	List<ArrayList<String>> result = kpn.report(iYear1, iYear2, k, gender.trim().charAt(0));		    	
	    	textAreaConsole.setText(kpn.getSummary(result, iYear1, iYear2, k,gender.trim().charAt(0)));
    	}
    	else
    		return;
    }
    
    /**
     *  Task two
     *  To be triggered by the "Table" button on the Task two Tab
     *  
     */
    @FXML
    void doKThPopularNamesForTable() {
    	int iYear1 = -1;
    	int iYear2 = -1;
    	int k = -1;
    	String summary = "";
    	String gender = "";
    	String tmp_year1 = t2_textfield_yoi1.getText();
    	String tmp_year2 = t2_textfield_yoi2.getText();
    	PopupWindow pw = new PopupWindow();
    	Task2_KthPopularNames kpn = new Task2_KthPopularNames();
    	
    	if(kpn.dataChecker(t2_textfield_yoi1, t2_textfield_yoi2, t2_textfield_k_th)) {
	    	iYear1 = Integer.parseInt(tmp_year1);
			iYear2 = Integer.parseInt(tmp_year2);
			k = Integer.parseInt(t2_textfield_k_th.getText());
			gender = t2_comboBox_gender.getSelectionModel().getSelectedItem().toString();
	    	List<ArrayList<String>> result = kpn.report(iYear1, iYear2, k, gender.trim().charAt(0));		    	
	    	pw.displayTableTask2("K-thPopular Names",result);
    	}
    	else
    		return;
    }
    
    /**
     *  Task two
     *  To be triggered by the "Pie" button on the Task two Tab
     *  
     */
    @FXML
    void doKThPopularNamesForPie() {
    	int iYear1 = -1;
    	int iYear2 = -1;
    	int k = -1;
    	String summary = "";
    	String gender = "";
    	String tmp_year1 = t2_textfield_yoi1.getText();
    	String tmp_year2 = t2_textfield_yoi2.getText();
    	PopupWindow pw = new PopupWindow();
    	Task2_KthPopularNames kpn = new Task2_KthPopularNames();
    	
    	if(kpn.dataChecker(t2_textfield_yoi1, t2_textfield_yoi2, t2_textfield_k_th)) {
	    	iYear1 = Integer.parseInt(tmp_year1);
			iYear2 = Integer.parseInt(tmp_year2);
			k = Integer.parseInt(t2_textfield_k_th.getText());
			gender = t2_comboBox_gender.getSelectionModel().getSelectedItem().toString();
	    	List<ArrayList<String>> result = kpn.report(iYear1, iYear2, k, gender.trim().charAt(0));		    	
	    	pw.displayPieChartTask2("K-th Popular Names",result);
    	}
    	else
    		return;
    }
    
    
    /**
     *  Task two
     *  To be triggered by the "Bar Chart" button on the Task two Tab
     *  
     */
    @FXML
    void doKThPopularNamesForBar() {
    	int iYear1 = -1;
    	int iYear2 = -1;
    	int k = -1;
    	String summary = "";
    	String gender = "";
    	String tmp_year1 = t2_textfield_yoi1.getText();
    	String tmp_year2 = t2_textfield_yoi2.getText();
    	PopupWindow pw = new PopupWindow();
    	Task2_KthPopularNames kpn = new Task2_KthPopularNames();
    	
    	if(kpn.dataChecker(t2_textfield_yoi1, t2_textfield_yoi2, t2_textfield_k_th)) {
	    	iYear1 = Integer.parseInt(tmp_year1);
			iYear2 = Integer.parseInt(tmp_year2);
			k = Integer.parseInt(t2_textfield_k_th.getText());
			gender = t2_comboBox_gender.getSelectionModel().getSelectedItem().toString();
	    	List<ArrayList<String>> result = kpn.report(iYear1, iYear2, k, gender.trim().charAt(0));		    	
	    	pw.displayBarChartTask2("K-th Popular Names",result);
    	}
    	else
    		return;
    }
    

  
    
    
    /**
     *  Task one
     *  To be triggered by the "Summary" button on the Task one Tab
     *  
     */
    

    @FXML
    void doSummary_T1() {
    	String _year = textfieldYear_T1.getText();
    	String _topN = textfieldTopN_T1.getText();
    	if(!Task1_AnalyzeNames.checkEmpty_T1(_year, _topN)) {
    		return;
    	}
    	int year = Integer.parseInt(_year);
    	int topN = Integer.parseInt(_topN);
    	if(!Task1_AnalyzeNames.checkValidInput_T1(year, topN)) {
    		return;
    	}
    	String oReport = Task1_AnalyzeNames.getSummary(year, topN);
    	textAreaConsole.setText(oReport);
    }
    
    /**
     *  Task one
     *  To be triggered by the "Data Table (Male)" button on the Task one Tab
     *  
     */
    
    @FXML
    void doDataTable_M_T1() {
    	String _year = textfieldYear_T1.getText();
    	String _topN = textfieldTopN_T1.getText();
    	if(!Task1_AnalyzeNames.checkEmpty_T1(_year, _topN)) {
    		return;
    	}
    	int year = Integer.parseInt(_year);
    	int topN = Integer.parseInt(_topN);
    	if(!Task1_AnalyzeNames.checkValidInput_T1(year, topN)) {
    		return;
    	}
    	JTable dataTable_M = Task1_AnalyzeNames.getDataTable_M(year, topN);
    }
    
    
    /**
     *  Task one
     *  To be triggered by the "PieChart (Female)" button on the Task one Tab
     *  
     */
    @FXML
    void doDataTable_F_T1() {
    	String _year = textfieldYear_T1.getText();
    	String _topN = textfieldTopN_T1.getText();
    	if(!Task1_AnalyzeNames.checkEmpty_T1(_year, _topN)) {
    		return;
    	}
    	int year = Integer.parseInt(_year);
    	int topN = Integer.parseInt(_topN);
    	if(!Task1_AnalyzeNames.checkValidInput_T1(year, topN)) {
    		return;
    	}
    	JTable dataTable_M = Task1_AnalyzeNames.getDataTable_F(year, topN);
    }

    /**
     *  Task one
     *  To be triggered by the "PieChart (Male)" button on the Task one Tab
     *  
     */
    @FXML
    void doPieChart_T1_M() {
    	String _year = textfieldYear_T1.getText();
    	String _topN = textfieldTopN_T1.getText();
    	if(!Task1_AnalyzeNames.checkEmpty_T1(_year, _topN)) {
    		return;
    	}
    	int year = Integer.parseInt(_year);
    	int topN = Integer.parseInt(_topN);
    	if(!Task1_AnalyzeNames.checkValidInput_T1(year, topN)) {
    		return;
    	}
    	Task1_AnalyzeNames.showPieChart_M(year, topN); 
    }
    
    /**
     *  Task one
     *  To be triggered by the "PieChart (Female)" button on the Task one Tab
     *  
     */
    @FXML
    void doPieChart_T1_F() {
    	String _year = textfieldYear_T1.getText();
    	String _topN = textfieldTopN_T1.getText();
    	if(!Task1_AnalyzeNames.checkEmpty_T1(_year, _topN)) {
    		return;
    	}
    	int year = Integer.parseInt(_year);
    	int topN = Integer.parseInt(_topN);
    	if(!Task1_AnalyzeNames.checkValidInput_T1(year, topN)) {
    		return;
    	}
    	Task1_AnalyzeNames.showPieChart_F(year, topN); 

    }

    /**
     *  Task one
     *  To be triggered by the "BarChart (Male)" button on the Task one Tab
     *  
     */
    @FXML
    void doBarChart_T1_M() {
    	String _year = textfieldYear_T1.getText();
    	String _topN = textfieldTopN_T1.getText();
    	if(!Task1_AnalyzeNames.checkEmpty_T1(_year, _topN)) {
    		return;
    	}
    	int year = Integer.parseInt(_year);
    	int topN = Integer.parseInt(_topN);
    	if(!Task1_AnalyzeNames.checkValidInput_T1(year, topN)) {
    		return;
    	}
    	Task1_AnalyzeNames.showBarChart_M(year, topN); 	
    }
    
    /**
     *  Task one
     *  To be triggered by the "BarChart (Female)" button on the Task one Tab
     *  
     */
    @FXML
    void doBarChart_T1_F() {
    	String _year = textfieldYear_T1.getText();
    	String _topN = textfieldTopN_T1.getText();
    	if(!Task1_AnalyzeNames.checkEmpty_T1(_year, _topN)) {
    		return;
    	}
    	int year = Integer.parseInt(_year);
    	int topN = Integer.parseInt(_topN);
    	if(!Task1_AnalyzeNames.checkValidInput_T1(year, topN)) {
    		return;
    	}
    	Task1_AnalyzeNames.showBarChart_F(year, topN); 	
    }
    
    /**
     *  Task four
     *  To be triggered by the "TX41" button on the Task four Tab
     *  
     */
    
    @FXML
    void t4x1_T4() {
    	String _dadYOB = textfieldDadYOB_T4.getText();
    	String _momYOB = textfieldMomYOB_T4.getText();
    	if(!Task1_AnalyzeNames.checkEmpty_T1(_dadYOB, _momYOB)) {
    		return;
    	}
    	int dadYOB = Integer.parseInt(_dadYOB);
    	int momYOB = Integer.parseInt(_momYOB);
    	if(!Task1_AnalyzeNames.checkValidInput_T1(dadYOB, momYOB)) {
    		return;
    	}
    	String dadName = textfieldDadName_T4.getText();
    	String momName = textfieldMomName_T4.getText();
    	if(!Task1_AnalyzeNames.checkEmpty_T1(dadName, momName)) {
    		return;
    	}
    	String oReport = Task4_nameRecommendation.t4x1_func(dadYOB, momYOB, dadName, momName);
    	textAreaConsole.setText(oReport);
    }
    
    
    /**
     *  Task four
     *  To be triggered by the "TX42" button on the Task four Tab
     *  
     */
    @FXML
    void t4x2_T4() {
    	String _dadYOB = textfieldDadYOB_T4.getText();
    	String _momYOB = textfieldMomYOB_T4.getText();
    	if(!Task1_AnalyzeNames.checkEmpty_T1(_dadYOB, _momYOB)) {
    		return;
    	}
    	int dadYOB = Integer.parseInt(_dadYOB);
    	int momYOB = Integer.parseInt(_momYOB);
    	if(Task1_AnalyzeNames.checkValidInput_T1(dadYOB, momYOB)) {
    		return;
    	}
    	String dadName = textfieldDadName_T4.getText();
    	String momName = textfieldMomName_T4.getText();
    	if(Task1_AnalyzeNames.checkEmpty_T1(dadName, momName)) {
    		return;
    	}
    	String oReport = Task4_nameRecommendation.t4x2_func(dadYOB, momYOB, dadName, momName);
    	textAreaConsole.setText(oReport);
    }


   

    /**
     *  Task five
     *  To be triggered by the "Summary" button on the Task two Tab
     *  
     */
    @FXML
    void doPredictionOnNamesForSummary() {
    	int year = -1;
    	int yearRange = -1;
    	String name = "";
    	String gender = "";
    	String genderMate = "";
    	String preference = "";
    	String algorithm = "";
    	Task5_PredictionPairsName pnp = new Task5_PredictionPairsName();

    	if(pnp.dataChecker(t5_textfield_name,t5_textfield_year,t5_combobox_gender,t5_combobox_gender_mate,t5_combobox_preference,t5_combobox_algorithm,t5_combobox_year_range))
    	{
        	name = t5_textfield_name.getText();
        	String tmp_year = t5_textfield_year.getText();
        	year =Integer.parseInt(tmp_year);
        	gender = t5_combobox_gender.getSelectionModel().getSelectedItem().toString();
        	genderMate = t5_combobox_gender_mate.getSelectionModel().getSelectedItem().toString();
        	preference = t5_combobox_preference.getSelectionModel().getSelectedItem().toString();
        	algorithm = t5_combobox_algorithm.getSelectionModel().getSelectedItem().toString();
        	yearRange = Integer.parseInt(t5_combobox_year_range.getSelectionModel().getSelectedItem().toString());
    		List<String> result = pnp.report(year,yearRange,algorithm,genderMate.trim().charAt(0),preference,name);
    		textAreaConsole.setText(pnp.getSummary(result, year, yearRange, preference, algorithm));	
    	}
    	else
    		return;
    }

    
    /**
     *  Task five
     *  To be triggered by the "Table" button on the Task two Tab
     *  
     */
    @FXML
    void doPredictionOnNamesForTable() {
    	int year = -1;
    	int yearRange = -1;
    	String name = "";
    	String gender = "";
    	String genderMate = "";
    	String preference = "";
    	String algorithm = "";
    	PopupWindow pw = new PopupWindow();
    	Task5_PredictionPairsName pnp = new Task5_PredictionPairsName();

    	if(pnp.dataChecker(t5_textfield_name,t5_textfield_year,t5_combobox_gender,t5_combobox_gender_mate,t5_combobox_preference,t5_combobox_algorithm,t5_combobox_year_range))
    	{
        	name = t5_textfield_name.getText();
        	String tmp_year = t5_textfield_year.getText();
        	year =Integer.parseInt(tmp_year);
        	gender = t5_combobox_gender.getSelectionModel().getSelectedItem().toString();
        	genderMate = t5_combobox_gender_mate.getSelectionModel().getSelectedItem().toString();
        	preference = t5_combobox_preference.getSelectionModel().getSelectedItem().toString();
        	algorithm = t5_combobox_algorithm.getSelectionModel().getSelectedItem().toString();
        	yearRange = Integer.parseInt(t5_combobox_year_range.getSelectionModel().getSelectedItem().toString());
    		List<String> result = pnp.report(year,yearRange,algorithm,genderMate.trim().charAt(0),preference,name);
    		pw.displayTableTask5("Prediction on Names for Compatible Pairs", result);
    	}
    	else
    		return;
    	
    }
}

